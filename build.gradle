
plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.9.22"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.9.22"
    id "io.quarkus"
    id "pmd"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://maven.cubrid.org/"
    }
}

pmd {
    ruleSetFiles = files("dodexstart.xml")
    ruleSets = []
    ignoreFailures = true
    toolVersion = "6.36.0"
}

ext {
    vertxVersion = "4.5.2"
    javaMainClass = "dmo.fs.db.handicap.utils.JooqGenerate"
}

dependencies {
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    // runtimeOnly("org.openrewrite:rewrite-java:7.38.0")
    implementation "io.quarkus:quarkus-resteasy-jackson"
    implementation "io.vertx:vertx-rx-java3:$vertxVersion"
    implementation "io.quarkus:quarkus-resteasy"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "io.quarkus:quarkus-grpc"
    implementation "io.quarkus:quarkus-kotlin"

    implementation "io.quarkus:quarkus-websockets"
    implementation "io.smallrye.reactive:smallrye-mutiny-vertx-jdbc-client"
    implementation "io.quarkus:quarkus-mutiny:${quarkusPlatformVersion}"

    implementation "io.vertx:vertx-jdbc-client:$vertxVersion"
    implementation "io.quarkus:quarkus-reactive-mysql-client"
    implementation "io.quarkus:quarkus-reactive-pg-client"
    implementation "io.quarkus:quarkus-reactive-db2-client"
    implementation "io.quarkiverse.neo4j:quarkus-neo4j:3.6.0"

    implementation "io.quarkus:quarkus-vertx-web:3.0.0.Beta1"
    implementation "io.quarkus:quarkus-vertx:${quarkusPlatformVersion}"
    
    implementation "io.quarkus:quarkus-vertx-http"
    implementation "io.quarkus:quarkus-smallrye-reactive-messaging-kafka"
    implementation "org.apache.kafka:kafka-clients"
    implementation("org.jooq:jooq:3.19.3")
    implementation("org.jooq:jooq-codegen-maven:3.19.3")
    implementation("org.jooq:jooq-meta:3.19.3")
    implementation("jakarta.xml.bind:jakarta.xml.bind-api")
    implementation "io.quarkus:quarkus-jdbc-h2:${quarkusPlatformVersion}"
    implementation "io.quarkus:quarkus-jdbc-mariadb:${quarkusPlatformVersion}"
    implementation "io.quarkus:quarkus-jdbc-postgresql:${quarkusPlatformVersion}"
    implementation "io.quarkus:quarkus-jdbc-db2:${quarkusPlatformVersion}"
    implementation "cubrid:cubrid-jdbc:11.2.0.0035"
    implementation "io.vertx:vertx-rx-java2:$vertxVersion"
    implementation "io.quarkus:quarkus-smallrye-health"
    implementation "io.vertx:vertx-tcp-eventbus-bridge:$vertxVersion"
    implementation "com.google.firebase:firebase-admin:9.2.0"
    implementation group: 'com.google.guava', name: 'guava', version: '32.1.2-jre'

//    implementation group: 'net.java.dev.jna', name: 'platform', version: '3.5.2'  // for graalvm
//    implementation group: "jakarta.xml.bind", name: "jakarta.xml.bind-api", version: "4.0.0"
//    runtimeOnly group: "com.sun.xml.bind", name: "jaxb-impl", version: "4.0.0"

    implementation("dmo.fs.utils:generate:0.0.1")

    testImplementation "io.quarkus:quarkus-junit5:${quarkusPlatformVersion}"
    testImplementation "io.rest-assured:rest-assured"

}

group 'dmo.fs'
version '3.2.0'

sourceCompatibility = "17"
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def usr = System.getProperty("user.home")
def OS = System.getProperty("os.name").toLowerCase()
def dir = System.getProperty("user.dir")

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:unchecked"
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_17
    kotlinOptions.javaParameters = true
    dependsOn compileQuarkusGeneratedSourcesJava
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_17
    dependsOn compileKotlin
}

/*
    The "run" task can be used to set Environment Variables before executing "quarkusDev"
 */

tasks.register('copyDatabaseConfig', Copy) {
    dependsOn gradle.includedBuild("generate").task(":build")
}
/*
  Using a java class to generate jooq objects - allows for multiple db's - see ./generate directory
  Composite build - implementation("dmo.fs.utils:generate:0.0.1") - this avoids the circular dependancy error
*/
tasks.register('jooqGenerate', JavaExec) {
    group "Execution"
    doFirst {
        classpath = sourceSets.main.runtimeClasspath
    }

    environment "VERTXWEB_ENVIRONMENT", "dev"
    mainClass = "dmo.fs.db.generate.utils.JooqGenerate"
    args = ["dev"]
    dependsOn copyDatabaseConfig
}

tasks.register('run', Exec) {
//   workingDir dir
    if ("firebase" == System.getenv("DEFAULT_DB") && System.getenv("GOOGLE_APPLICATION_CREDENTIALS") == null) {
        environment "GOOGLE_APPLICATION_CREDENTIALS", "$usr/auth/service-account-key.json"
    }
    //on windows:
    if (OS.indexOf("win") >= 0) {
        commandLine "cmd", "/c", ".\\gradlew", "quarkusDev"
    } else {
        //on linux
        commandLine "./gradlew", "quarkusDev"
    }
    dependsOn gradle.includedBuild("generate").task(":build")
}
jar {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}
compileTestJava {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}
